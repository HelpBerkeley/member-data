Audit/validate that the topic ids for posting are valid.

Reverse engineer recipes for:
	- Deleting a post.
	- Uploading a file.
	- Passing parameters to a queries

	Documentation at https://docs.discourse.org/
	Discussion at https://meta.discourse.org/

Set large limit for all queries.

Update all queries to ignore deleted posts

Store queries in git (in addition to in the site).
	- Done, but a manual proces that needs
	to be repeated when queries are changed
	on the site.

Replace all assertions with MemberDataException

Improve code coverage / testing for exception reporting. 

Handle if the user enters "none" or something
similar for their second phone.

Add more flexibility to command line auditing
	- Non-file arguments
	- command specific help messages

Detect controlBlockRestaurant name misspellings in workflow data.
 - If detected, correct and warn?  Or audit fail?

Update error strings to use a message catalog.
Update testing to removed duplicate expected strings.

Turn the "member data requiring attention" postings back on.

Add a generic request handler that can be used to run various
cron-ish jobs on demand.

Audit where posts are going to and that category access
is as expected.

When displaying, adjust post number to take deleted posts into account

Restaurant template auditing.  Validate that the restaurants
are present in both sections.

Use Discourse ids to identify groups, to insulate against
changes to group names.

Double quotes in a full user name will cause HTTP 400 errors
when used in a generated message/table.  Example: a full user
name of Joe "Billy Bob" Thorton

Add a heart beat post update, to show the back end running

Update user names to audit case-insensitive

Audits for ReplaceThisBy in new control block

Make posts in get driver messages match the summary order.
